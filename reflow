#!/usr/bin/python3

import re
import sys
from typing import List

def is_table(para:str) -> bool:
    return para.startswith('{: title="')

def is_verbatim(para:str) -> bool:
    for line in para.split('\n'):
        if not line.startswith('    '):
            return False
    return True

def is_yaml_metadata(para:str) -> bool:
    return para.startswith('---\n')

def is_quoted_text(para:str) -> bool:
    for line in para.split('\n'):
        if not line.startswith('>'):
            return False
    return True

def is_header(para:str) -> bool:
    if re.compile('^\#+ [^\n]*$').match(para):
        return True
    return False

def reflow(para:str) -> str:
    # don't reflow tables, verbatim blocks, YAML metadata, or quoted text:
    if is_table(para) or is_verbatim(para) or is_yaml_metadata(para) or is_quoted_text(para):
        return para

    if is_header(para):
        return para

    intro:str = ''
    lines:List[str] = para.split('\n')

    while lines[0].startswith('{:'):
        intro += lines[0] + '\n'
        lines = lines[1:]

    indent:str = ''

    # handle definition lists
    if len(lines) > 1 and lines[1].startswith(': '):
        intro += lines[0] + '\n'
        lines = lines[1:]
        indent = '  '
 
    if len(lines) > 1:
        match = re.compile('^ +').match(lines[1])
        if match:
            indent = match.group()

    # if a paragraph starts with some leading space, we shouldn't strip that
    leading_space = re.compile('^ +').match(lines[0])
    if leading_space:
        intro += leading_space.group()

    x = ' '.join(map(str.strip, lines))
    # assume all sentences split with a period (.), and not ! or ?
    # also, accept accidental breaks on abbreviations like John Q. Public
    sentences:List[str] = x.split('. ')

    # avoid splitting on a numbered list:
    list_number = re.compile('^[0-9]+$').match(sentences[0])
    if list_number:
        sentences = [sentences[0] + '. ' + sentences[1]] + sentences[2:]
        if indent == '':
            indent = ' '*(2 + len(list_number.group()))

    return intro + ('.\n' + indent).join(map(str.strip, sentences))

incoming = sys.stdin.read()

paras = incoming.strip().split('\n\n')

out = []

for para in paras:
    out += [reflow(para)]

print('\n\n'.join(out))
